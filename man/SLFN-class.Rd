% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/SLFN-class.R, R/add_neurons.R, R/errors.R, R/predict.R, R/ranking.R, R/train.R, R/train_pruning.R
\docType{class}
\name{SLFN-class}
\alias{SLFN}
\alias{SLFN-class}
\alias{add_neurons,SLFN-method}
\alias{class_postprocess,SLFN-method}
\alias{get_error,SLFN-method}
\alias{mse,SLFN-method}
\alias{project,elm-method}
\alias{prune,SLFN-method}
\alias{rank_neurons,SLFN-method}
\alias{show,SLFN-method}
\alias{solve_system,elm-method}
\alias{train,elm-method}
\alias{train_pruning,SLFN-method}
\title{Class \code{"SLFN"}}
\usage{
\S4method{show}{SLFN}(object)

\S4method{add_neurons}{SLFN}(object, act_fun, nn, w_in = NULL, b = NULL)

\S4method{get_error}{SLFN}(object, n_sel, h, y, h_val = NULL, y_val = NULL,
  cv_rows = NULL)

\S4method{mse}{SLFN}(object, y, yp, x)

\S4method{class_postprocess}{SLFN}(object, yp, class_output, ml_threshold)

\S4method{rank_neurons}{SLFN}(object, nn_max, h = NULL, y = NULL)

\S4method{train}{elm}(object, x, y, x_val = NULL, y_val = NULL,
  type = "reg", tune = "none", ranking = "random", validation = "none",
  folds = 10, class_weights = NULL, ...)

\S4method{project}{elm}(object, x, rbf_dist = "euclidean")

\S4method{solve_system}{elm}(object, h, y, solve = TRUE)

\S4method{train_pruning}{SLFN}(object, h, y, h_val = NULL, y_val = NULL,
  cv_rows = NULL)

\S4method{prune}{SLFN}(object, n_sel)
}
\arguments{
\item{object}{The SLFN object to be displayed.}
}
\description{
A S4 class to represent a Single-hidden Layer Feed-forward Network (SLFN)

Display a SLFN object.
}
\details{
Include here more details <<<<<<ANDRES<<<<<<
}
\section{Methods (by generic)}{
\itemize{
\item \code{show}: show an object of class \code{SLFN}

\item \code{add_neurons}: add neurons of the same type of activation function to the hidden layer

\item \code{get_error}: implement a validation procedure

\item \code{mse}: MSE error

\item \code{class_postprocess}: Description of class_postprocess for SLFN (origin predic.R)

\item \code{rank_neurons}: rank neurons of a SLFN

\item \code{train}: train the SLFN

\item \code{project}: project form input-space to neuron-space. Compute H

\item \code{solve_system}: solve linear system H x Wout = Y

\item \code{train_pruning}: Optimization procedure for obtaining the optimial number of neurons for pruning.

\item \code{prune}: Prune the hidden layer of a SLFN
}}
\section{Slots}{

\describe{
\item{\code{inputs}}{The number of input features.}

\item{\code{outputs}}{The number of outputs.}

\item{\code{h_neurons}}{An object of classs hiddenlayer}

\item{\code{w_out}}{The weight output vector that includes the computed weights between
the hidden and the output layer.
      output weights - vector (1 output) / matrix (n outputs)}
}}
\keyword{classes}

