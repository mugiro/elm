% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/wrapper.R
\name{wrapper}
\alias{wrapper}
\title{wrapper}
\usage{
wrapper(x, y, x_val = NULL, y_val = NULL, neur_type, nn, w = NULL,
  b = NULL, type = "reg", tune = "none", validation = "none",
  ranking = "random", ridge, ....)
}
\arguments{
\item{x}{The input data values in a matrix or vector}

\item{y}{The output data values in a matrix or vector}

\item{x_val}{The input data values in a matrix or vector for performing a simple
validation procedure}

\item{y_val}{The output data values in a matrix or vector for performing a
simple validation procedure}

\item{nType}{The types of activation functions used in a vector}

\item{nNeurons}{A vector containing the number of hidden neurons per type of
activation function}

\item{W}{A list of suitable matrix with the input weight vectors or centroids
(rbf) per type of activation function}

\item{B}{A list of suitable vector with the input biases or sigmas (rbf)
per type of activation function}

\item{structureSelection}{A numeric vector with the number of hidden neurons added.}

\item{...}{Optional additional parameters. None are used at present.}
}
\value{
An object of class \code{"SLFN"} with the model developed
}
\description{
\code{wrapper} creates and trains an object of class SLFN for given X and Y.
}
\details{
This function is a wrapper for summarizing several actions requiered when
creating and adjusting an ELM model. The particular steps are listed below.
\enumerate{
\item Creates the SLFN object by calling \code{new()}.
\item Adds the different hidden neurons by making sequential calls to \code{addNeurons()},
 one call per each type of activation function defined.
\item Trains the SLFN and obtaines the output weigth vector by calling \code{train()}.
}
}
\examples{
X = seq(0, 7, 0.01)
Y = sin(X)
a = trainELM(X = X, Y = Y, nType = "sigmoid", nNumber = 20)
a = trainELM(X = X, Y = Y, nType = c("sigmoid", "tanH"), nNumber = c(20, 10))
}

